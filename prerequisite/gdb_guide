
Breakpoints, Examining Registers and Memory
===========================================

What is a Breakpoint?

- Technique used to "Pause" the program during execution based on 
certain criteria
- Criteria can be "about to execute an instruction" (why you want to examine)
- Debugger allows you to inspect/modify CPU Registers, Memory, Data etc

Setting a Breakpoint in GDB
---------------------------

1. Multiple Options:
- break <address>
- break <function_name>
- break <line_number>


E.g.
ex1.c

$ gcc -ggdb ex1.c -o ex1
$ ./ex1 architecture


$ gdb ./ex1
GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./ex1...done.

(gdb) run architecture

Starting program: /home/null/Documents/git_resource/computer_architecture/computer_architecture/prerequisite/ex1 architecture


architecture

[Inferior 1 (process 7638) exited with code 064]
(gdb)

(gdb) list 1
1	#include <string.h>
2	#include <stdio.h>
3	
4	void reply_back(char *userdata){
5	    char buffer[20];
6	    strcpy(buffer, userdata);
7	    printf("\n\n%s\n\n", buffer);
8	}
9	
10	int main(int argc, char **argv){
(gdb) 
11	    reply_back(argv[1]);
12	    return 0x1234;
13	}
14	
(gdb) 
Line number 15 out of range; ex1.c has 14 lines

(gdb) break main
Breakpoint 1 at 0x400640: file ex1.c, line 11.

(gdb) list 11
6	    strcpy(buffer, userdata);
7	    printf("\n\n%s\n\n", buffer);
8	}
9	
10	int main(int argc, char **argv){
11	    reply_back(argv[1]);
12	    return 0x1234;
13	}
14	
(gdb) run architecture 
Starting program: /home/null/Documents/git_resource/computer_architecture/computer_architecture/prerequisite/ex1 architecture

Breakpoint 1, main (argc=2, argv=0x7fffffffde18) at ex1.c:11
11	    reply_back(argv[1]);


(gdb) info registers
rax            0x400631	4195889
rbx            0x0	0
rcx            0x0	0
rdx            0x7fffffffde30	140737488346672
rsi            0x7fffffffde18	140737488346648
rdi            0x2	2
rbp            0x7fffffffdd30	0x7fffffffdd30
rsp            0x7fffffffdd20	0x7fffffffdd20
r8             0x4006d0	4196048
r9             0x7ffff7de78e0	140737351940320
r10            0x846	2118
r11            0x7ffff7a2e740	140737348036416
r12            0x4004e0	4195552
r13            0x7fffffffde10	140737488346640
r14            0x0	0
r15            0x0	0
rip            0x400640	0x400640 <main+15>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0


(gdb) break reply_back 
Breakpoint 2 at 0x4005e2: file ex1.c, line 4.

(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400640 in main at ex1.c:11
	breakpoint already hit 1 time
2       breakpoint     keep y   0x00000000004005e2 in reply_back at ex1.c:4

Note: Both break points are enable and first is already hit 1

We can disable break point. 

(gdb) disable 1
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep n   0x0000000000400640 in main at ex1.c:11
	breakpoint already hit 1 time
2       breakpoint     keep y   0x00000000004005e2 in reply_back at ex1.c:4

(gdb) enable 1
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400640 in main at ex1.c:11
	breakpoint already hit 1 time
2       breakpoint     keep y   0x00000000004005e2 in reply_back at ex1.c:4


Delete Breakpoint
-----------------
(gdb) delete 1
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
2       breakpoint     keep y   0x00000000004005e2 in reply_back at ex1.c:4

break points number doesn't change.

(gdb) break main
Breakpoint 3 at 0x400640: file ex1.c, line 11.
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
2       breakpoint     keep y   0x00000000004005e2 in reply_back at ex1.c:4
3       breakpoint     keep y   0x0000000000400640 in main at ex1.c:11


Capability to examine Memory
----------------------------
(gdb) help x
Examine memory: x/FMT ADDRESS.
ADDRESS is an expression for the memory address to examine.
FMT is a repeat count followed by a format letter and a size letter.
Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
  t(binary), f(float), a(address), i(instruction), c(char), s(string)
  and z(hex, zero padded on the left).
Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
The specified number of objects of the specified size are printed
according to the format.

Defaults for format and size letters are those previously used.
Default count is 1.  Default address is following last thing printed
with this command or "print".

(gdb) print argv[1]
$1 = 0x7fffffffe1fe "architecture"

(gdb) print argv[0]
$2 = 0x7fffffffe19f "/home/null/Documents/git_resource/computer_architecture/computer_architecture/prerequisite/ex1"

which is absolute path of the program executable

(gdb) x/s argv[1]
0x7fffffffe1fe:	"architecture"
(gdb) x/s argv[0]
0x7fffffffe19f:	"/home/null/Documents/git_resource/computer_architecture/computer_architecture/prerequisite/ex1"

(gdb) info registers 
rax            0x400631	4195889
rbx            0x0	0
rcx            0x0	0
rdx            0x7fffffffde30	140737488346672
rsi            0x7fffffffde18	140737488346648
rdi            0x2	2
rbp            0x7fffffffdd30	0x7fffffffdd30
rsp            0x7fffffffdd20	0x7fffffffdd20
r8             0x4006d0	4196048
r9             0x7ffff7de78e0	140737351940320
r10            0x846	2118
r11            0x7ffff7a2e740	140737348036416
r12            0x4004e0	4195552
r13            0x7fffffffde10	140737488346640
r14            0x0	0
r15            0x0	0
rip            0x400640	0x400640 <main+15>
eflags         0x202	[ IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0

----------
rip ====> 0x400640
We can disassamble funtion using
(gdb) disassemble main
Dump of assembler code for function main:
   0x0000000000400631 <+0>:	push   %rbp
   0x0000000000400632 <+1>:	mov    %rsp,%rbp
   0x0000000000400635 <+4>:	sub    $0x10,%rsp
   0x0000000000400639 <+8>:	mov    %edi,-0x4(%rbp)
   0x000000000040063c <+11>:	mov    %rsi,-0x10(%rbp)
=> 0x0000000000400640 <+15>:	mov    -0x10(%rbp),%rax
   0x0000000000400644 <+19>:	add    $0x8,%rax
   0x0000000000400648 <+23>:	mov    (%rax),%rax
   0x000000000040064b <+26>:	mov    %rax,%rdi
   0x000000000040064e <+29>:	callq  0x4005d6 <reply_back>
   0x0000000000400653 <+34>:	mov    $0x1234,%eax
   0x0000000000400658 <+39>:	leaveq 
   0x0000000000400659 <+40>:	retq   
End of assembler dump.

=> shows where currently rip is pointing.
(gdb) x/i 0x400640
=> 0x400640 <main+15>:	mov    -0x10(%rbp),%rax

(gdb) x/10i 0x400640
=> 0x400640 <main+15>:	mov    -0x10(%rbp),%rax
   0x400644 <main+19>:	add    $0x8,%rax
   0x400648 <main+23>:	mov    (%rax),%rax
   0x40064b <main+26>:	mov    %rax,%rdi
   0x40064e <main+29>:	callq  0x4005d6 <reply_back>
   0x400653 <main+34>:	mov    $0x1234,%eax
   0x400658 <main+39>:	leaveq 
   0x400659 <main+40>:	retq   
   0x40065a:	nopw   0x0(%rax,%rax,1)
   0x400660 <__libc_csu_init>:	push   %r15

(gdb) x/10xw $rsp
0x7fffffffdd20:	0xffffde18	0x00007fff	0x00000000	0x00000002
0x7fffffffdd30:	0x00400660	0x00000000	0xf7a2e830	0x00007fff
0x7fffffffdd40:	0x00000000	0x00000000

(gdb) x/1xw argv
0x7fffffffde18:	0xffffe19f


(gdb) break *0x0000000000400653
Breakpoint 4 at 0x400653: file ex1.c, line 12.
(gdb) info breakpoints 
Num     Type           Disp Enb Address            What
2       breakpoint     keep y   0x00000000004005e2 in reply_back at ex1.c:4
4       breakpoint     keep y   0x0000000000400653 in main at ex1.c:12

(gdb) continue 
Continuing.

Breakpoint 2, reply_back (userdata=0x7fffffffe1fe "architecture") at ex1.c:4
4	void reply_back(char *userdata){


Continue until next break point hits.

(gdb) stepi 
per instruction basis

(gdb) step
per line basis

(gdb) help step
Step program until it reaches a different source line.
Usage: step [N]
Argument N means step N times (or till program stops for another reason).

(gdb) help stepi
Step one instruction exactly.
Usage: stepi [N]
Argument N means step N times (or till program stops for another reason).


Modifying Register and Memory
=============================
$ gcc -ggdb ex2.c -o ex2
$ ./ex2 AAAA 10 20
AAAA

Sum of 10 + 20 is 30



$ gdb ./ex2

(gdb) break main
Breakpoint 1 at 0x4006f6: file ex2.c, line 21.
(gdb) run AAAA 20 30
Starting program: /home/null/Documents/git_resource/computer_architecture/computer_architecture/prerequisite/ex2 AAAA 20 30

Breakpoint 1, main (argc=4, argv=0x7fffffffde18) at ex2.c:21
21	    int sum = 0;

(gdb) print argv[1]
$1 = 0x7fffffffe200 "AAAA"
(gdb) print argv[2]
$2 = 0x7fffffffe205 "20"
(gdb) print argv[3]
$3 = 0x7fffffffe208 "30"
(gdb) x/s argv[1]
0x7fffffffe200:	"AAAA"
(gdb) x/s argv[2]
0x7fffffffe205:	"20"
(gdb) x/s argv[3]
0x7fffffffe208:	"30"

(gdb) x/5c argv[1]
0x7fffffffe200:	65 'A'	65 'A'	65 'A'	65 'A'	0 '\000'

at the end 0 '\000' is string termination character.


(gdb) set {char} 0x7fffffffe200 = 'B'
(gdb) x/5c argv[1]
0x7fffffffe200:	66 'B'	65 'A'	65 'A'	65 'A'	0 '\000'

(gdb) x/5c argv[1]
0x7fffffffe200:	67 'C'	65 'A'	65 'A'	65 'A'	0 '\000'

(gdb) x/5c argv[1]
0x7fffffffe200:	67 'C'	0 '\000'	0 '\000'	0 '\000'	0 '\000'

(gdb) set {int} 0x7fffffffe200 = 0
(gdb) x/5c argv[1]
0x7fffffffe200:	0 '\000'	0 '\000'	0 '\000'	0 '\000'	0 '\000'
(gdb) set {int} 0x7fffffffe200 = 1
(gdb) x/5c argv[1]
0x7fffffffe200:	1 '\001'	0 '\000'	0 '\000'	0 '\000'	0 '\000'

(gdb) set {char} 0x7fffffffe200 = 'B'
(gdb) set {char} (0x7fffffffe200+1) = 'B'
(gdb) set {char} (0x7fffffffe200+2) = 'B'
(gdb) set {char} (0x7fffffffe200+3) = 'B'
(gdb) x/5c argv[1]
0x7fffffffe200:	66 'B'	66 'B'	66 'B'	66 'B'	0 '\000'

(gdb) c
Continuing.


BBBB

Sum of 20 + 30 is 50

[Inferior 1 (process 8252) exited normally]

(gdb) run AAAA 10 20
Starting program: /home/null/Documents/git_resource/computer_architecture/computer_architecture/prerequisite/ex2 AAAA 10 20

Breakpoint 1, main (argc=4, argv=0x7fffffffde18) at ex2.c:21
21	    int sum = 0;


(gdb) l
16	    return x + y;
17	}
18	
19	
20	int main(int argc, char **argv){
21	    int sum = 0;
22	    reply_back(argv[1]);
23	    sum = get_sum(atoi(argv[2]), atoi(argv[3]));
24	    printf("Sum of %s + %s is %d\n\n", argv[2], argv[3], sum);
25	    return 0;
(gdb) 
26	}
27	


Lets go ahead and set break point before printing sum.

(gdb) break 24
Breakpoint 2 at 0x400744: file ex2.c, line 24.

(gdb) c
Continuing.


AAAA


Breakpoint 2, main (argc=4, argv=0x7fffffffde18) at ex2.c:24
24	    printf("Sum of %s + %s is %d\n\n", argv[2], argv[3], sum);
(gdb) print sum
$4 = 30

(gdb) set sum = 5000
(gdb) c
Continuing.
Sum of 10 + 20 is 5000

[Inferior 1 (process 8515) exited normally]


GDB also allows us to change CPU registers at run time.

Lets determine the address of the functions using GDB.


(gdb) info functions
All defined functions:

File ex2.c:
int get_sum(int, int);
int main(int, char **);
void reply_back(char *);
void routineshouldnotrun(void);

Non-debugging symbols:
0x00000000004004d0  _init
0x0000000000400500  strcpy@plt
0x0000000000400510  puts@plt
0x0000000000400520  __stack_chk_fail@plt
0x0000000000400530  printf@plt
0x0000000000400540  __libc_start_main@plt
0x0000000000400550  atoi@plt
0x0000000000400570  _start
0x00000000004005a0  deregister_tm_clones
0x00000000004005e0  register_tm_clones
0x0000000000400620  __do_global_dtors_aux
0x0000000000400640  frame_dummy
0x0000000000400780  __libc_csu_init
0x00000000004007f0  __libc_csu_fini
0x00000000004007f4  _fini

(gdb) print routineshouldnotrun
$1 = {void (void)} 0x400666 <routineshouldnotrun>

(gdb) b main
Breakpoint 1 at 0x4006f6: file ex2.c, line 21.
(gdb) run AAAA 10 20
Starting program: /home/null/Documents/git_resource/computer_architecture/computer_architecture/prerequisite/ex2 AAAA 10 20

Breakpoint 1, main (argc=4, argv=0x7fffffffde18) at ex2.c:21
21	    int sum = 0;
(gdb) info registers 
rax            0x4006e6	4196070
rbx            0x0	0
rcx            0x0	0
rdx            0x7fffffffde40	140737488346688
rsi            0x7fffffffde18	140737488346648
rdi            0x4	4
rbp            0x7fffffffdd30	0x7fffffffdd30
rsp            0x7fffffffdd00	0x7fffffffdd00
r8             0x4007f0	4196336
r9             0x7ffff7de78e0	140737351940320
r10            0x846	2118
r11            0x7ffff7a2e740	140737348036416
r12            0x400570	4195696
r13            0x7fffffffde10	140737488346640
r14            0x0	0
r15            0x0	0
rip            0x4006f6	0x4006f6 <main+16>
eflags         0x206	[ PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0


Change the value of register as follows:
(gdb) set $rax = 30
(gdb) info registers 
rax            0x1e	30
rbx            0x0	0
rcx            0x0	0
rdx            0x7fffffffde40	140737488346688
rsi            0x7fffffffde18	140737488346648
rdi            0x4	4
rbp            0x7fffffffdd30	0x7fffffffdd30
rsp            0x7fffffffdd00	0x7fffffffdd00
r8             0x4007f0	4196336
r9             0x7ffff7de78e0	140737351940320
r10            0x846	2118
r11            0x7ffff7a2e740	140737348036416
r12            0x400570	4195696
r13            0x7fffffffde10	140737488346640
r14            0x0	0
r15            0x0	0
rip            0x4006f6	0x4006f6 <main+16>
eflags         0x206	[ PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0

(gdb) c
Continuing.


AAAA

Sum of 10 + 20 is 30

[Inferior 1 (process 9195) exited normally]


(gdb) run AAAA 40 50
Starting program: /home/null/Documents/git_resource/computer_architecture/computer_architecture/prerequisite/ex2 AAAA 40 50

Breakpoint 1, main (argc=4, argv=0x7fffffffde18) at ex2.c:21
21	    int sum = 0;
(gdb) info registers 
rax            0x4006e6	4196070
rbx            0x0	0
rcx            0x0	0
rdx            0x7fffffffde40	140737488346688
rsi            0x7fffffffde18	140737488346648
rdi            0x4	4
rbp            0x7fffffffdd30	0x7fffffffdd30
rsp            0x7fffffffdd00	0x7fffffffdd00
r8             0x4007f0	4196336
r9             0x7ffff7de78e0	140737351940320
r10            0x846	2118
r11            0x7ffff7a2e740	140737348036416
r12            0x400570	4195696
r13            0x7fffffffde10	140737488346640
r14            0x0	0
r15            0x0	0
rip            0x4006f6	0x4006f6 <main+16>
eflags         0x206	[ PF IF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0

The one of the interesting registers is rip, which holds the location of the
instruction to be executed next.

Lets change the value of the rip, whihc points to the address of the function
routineshouldnotrun i.e. 0x400666.

(gdb) c
Continuing.


I Should not execute!!!


Program received signal SIGSEGV, Segmentation fault.
0x00007fffffffde18 in ?? ()

Example: ex2_withouterror.c
$ gcc -ggdb ex2_withouterror.c -o ex2_withouterror

$ gdb ./ex2_withouterror

(gdb) b main
Breakpoint 1 at 0x40074d: file ex2_withouterror.c, line 22.
(gdb) info functions
All defined functions:

File ex2_withouterror.c:
int get_sum(int, int);
int main(int, char **);
void reply_back(char *);
void routineshouldnotrun(void);

Non-debugging symbols:
0x0000000000400508  _init
0x0000000000400540  strcpy@plt
0x0000000000400550  puts@plt
0x0000000000400560  __stack_chk_fail@plt
0x0000000000400570  printf@plt
0x0000000000400580  __libc_start_main@plt
0x0000000000400590  atoi@plt
0x00000000004005a0  exit@plt
0x00000000004005c0  _start
0x00000000004005f0  deregister_tm_clones
0x0000000000400630  register_tm_clones
0x0000000000400670  __do_global_dtors_aux
0x0000000000400690  frame_dummy
0x00000000004007e0  __libc_csu_init
0x0000000000400850  __libc_csu_fini
0x0000000000400854  _fini
(gdb) print routineshouldnotrun
$1 = {void (void)} 0x4006b6 <routineshouldnotrun>

(gdb) run AAA 30 40
Starting program: /home/null/Documents/git_resource/computer_architecture/computer_architecture/prerequisite/ex2_withouterror AAA 30 40

Breakpoint 1, main (argc=4, argv=0x7fffffffddf8) at ex2_withouterror.c:22
22	    int sum = 0;
(gdb) set $rip = 0x4006b6
(gdb) c
Continuing.


I Should not execute!!!

[Inferior 1 (process 9286) exited normally]


Convenience Variables and Calling Routines
==========================================
- create variables in GDB to hold data
- set $x = 90
- set $dynamic = (char *) malloc(10)
- $demo = "architecture"
- set argv[1] = $demo

(gdb) set $i = 90
(gdb) print $i
$2 = 90
(gdb) 

(gdb) b main
Note: breakpoint 1 also set at pc 0x40074d.
Breakpoint 2 at 0x40074d: file ex2_withouterror.c, line 22.
(gdb) run BBB 40 50
Starting program: /home/null/Documents/git_resource/computer_architecture/computer_architecture/prerequisite/ex2_withouterror BBB 40 50

Breakpoint 1, main (argc=4, argv=0x7fffffffddf8) at ex2_withouterror.c:22
22	    int sum = 0;

(gdb) print argv[1]
$3 = 0x7fffffffe1f3 "BBB"
(gdb) set $val = "CCCCC"
(gdb) print $val
$4 = "CCCCC"
(gdb) set argv[1] = $val
(gdb) print argv[1]
$5 = 0x602010 "CCCCC"

(gdb) c
Continuing.


CCCCC

Sum of 40 + 50 is 90

[Inferior 1 (process 9485) exited normally]

(gdb) set $dyn_char = (char *)malloc(10)
(gdb) print $dyn_char
$6 = 0x602010 ""
(gdb) x/10xb $dyn_char
0x602010:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x602018:	0x00	0x00

(gdb) print argv[1]
$8 = 0x7fffffffe1f3 "BBB"
(gdb) print $dyn_char
$9 = 0x602010 ""
(gdb) x/10xb $dyn_char
0x602010:	0x00	0x00	0x00	0x00	0x00	0x00	0x00	0x00
0x602018:	0x00	0x00
(gdb) call strcpy($dyn_char, argv[1])
$10 = 6299664
(gdb) x/10xb $dyn_char
0x602010:	0x42	0x42	0x42	0x00	0x00	0x00	0x00	0x00
0x602018:	0x00	0x00

(gdb) x/10c $dyn_char
0x602010:	66 'B'	66 'B'	66 'B'	0 '\000'	0 '\000'	0 '\000'0 '\000'	0 '\000'
0x602018:	0 '\000'	0 '\000'

(gdb) set argv[1] = $dyn_char
(gdb) print argv[1]
$12 = 0x602010 "BBB"

(gdb) info functions
All defined functions:

File ex2_withouterror.c:
int get_sum(int, int);
int main(int, char **);
void reply_back(char *);
void routineshouldnotrun(void);

Non-debugging symbols:
0x0000000000400508  _init
0x0000000000400540  strcpy@plt
0x0000000000400550  puts@plt
0x0000000000400560  __stack_chk_fail@plt
0x0000000000400570  printf@plt
0x0000000000400580  __libc_start_main@plt
0x0000000000400590  atoi@plt
0x00000000004005a0  exit@plt
0x00000000004005c0  _start
0x00000000004005f0  deregister_tm_clones
0x0000000000400630  register_tm_clones
0x0000000000400670  __do_global_dtors_aux
0x0000000000400690  frame_dummy
0x00000000004007e0  __libc_csu_init
0x0000000000400850  __libc_csu_fini
0x0000000000400854  _fini



(gdb) r
Starting program: /home/null/Documents/git_resource/computer_architecture/computer_architecture/prerequisite/ex2_withouterror 

Breakpoint 1, main (argc=1, argv=0x7fffffffde18) at ex2_withouterror.c:22
22	    int sum = 0;
(gdb) call get_sum(90, 100)
$1 = 190

(gdb) set $x = 80
(gdb) set $y = 80
(gdb) call get_sum($x, $y)
$2 = 160


